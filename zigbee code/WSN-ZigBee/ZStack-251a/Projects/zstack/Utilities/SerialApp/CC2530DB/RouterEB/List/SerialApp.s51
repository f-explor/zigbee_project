///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        22/Apr/2019  21:04:22 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  G:\study\Gateway_TFT\µÚ7ÕÂ                        /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\Source\SerialApp.c   /
//    Command line       =  -f "G:\study\Gateway_TFT\µÚ7ÕÂ                    /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\To /
//                          ols\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ           /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                  /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\To /
//                          ols\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO          /
//                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x02000000                     /
//                          -DZDAPP_CONFIG_PAN_ID=0x1688                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "G:\study\Gateway_TFT\µÚ7Õ /
//                          Â WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆ /
//                          zigbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Proje /
//                          cts\zstack\Utilities\SerialApp\Source\SerialApp.c /
//                          " -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D        /
//                          LCD_SUPPORTED -lC "G:\study\Gateway_TFT\µÚ7ÕÂ     /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\RouterEB\Li /
//                          st\" -lA "G:\study\Gateway_TFT\µÚ7ÕÂ              /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\RouterEB\Li /
//                          st\" --diag_suppress Pe001,Pa010 -o               /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\RouterEB\Ob /
//                          j\" -e --no_code_motion --debug --core=plain      /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\" -I        /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\Source\" /
//                           -I "G:\study\Gateway_TFT\µÚ7ÕÂ                   /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ZM /
//                          ain\TI2530DB\" -I "G:\study\Gateway_TFT\µÚ7ÕÂ     /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\hal\include\" -I                   /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\hal\target\CC2530EB\" -I           /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\mac\include\" -I                   /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\mac\high_level\" -I                /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\mac\low_level\srf04\" -I           /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\mac\low_level\srf04\single_chip\"  /
//                          -I "G:\study\Gateway_TFT\µÚ7ÕÂ                    /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\mt\" -I "G:\study\Gateway_TFT\µÚ7Õ /
//                          Â WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆ /
//                          zigbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Proje /
//                          cts\zstack\Utilities\SerialApp\CC2530DB\..\..\..\ /
//                          ..\..\Components\osal\include\" -I                /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\services\saddr\" -I                /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\services\sdata\" -I                /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\af\" -I                      /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\nwk\" -I                     /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\sapi\" -I                    /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\sec\" -I                     /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\sys\" -I                     /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\stack\zdo\" -I                     /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\zmac\" -I                          /
//                          "G:\study\Gateway_TFT\µÚ7ÕÂ                       /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\..\..\..\.. /
//                          \..\Components\zmac\f8w\" -Ohz                    /
//                          --require_prototypes                              /
//    List file          =  G:\study\Gateway_TFT\µÚ7ÕÂ                        /
//                          WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzi /
//                          gbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Project /
//                          s\zstack\Utilities\SerialApp\CC2530DB\RouterEB\Li /
//                          st\SerialApp.s51                                  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SerialApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_DIV_MOD
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??Delay_MS?relay,0203H
        FUNCTION ??GetDataLen?relay,0203H
        FUNCTION ??MotorData?relay,0203H
        PUBLIC ??SendData?relay
        FUNCTION ??SendData?relay,0203H
        FUNCTION ??SerialApp_CallBack?relay,0203H
        PUBLIC ??SerialApp_Init?relay
        FUNCTION ??SerialApp_Init?relay,0203H
        PUBLIC ??SerialApp_ProcessEvent?relay
        FUNCTION ??SerialApp_ProcessEvent?relay,0203H
        FUNCTION ??SerialApp_ProcessMSGCmd?relay,0203H
        FUNCTION ??SerialApp_Send?relay,0203H
        FUNCTION ??SerialApp_SendPeriodicMessage?relay,0203H
        FUNCTION ??XorCheckSum?relay,0203H
        PUBWEAK `??_IRQ_timer1??INTVEC 75`
        PUBLIC ??init_port?relay
        FUNCTION ??init_port?relay,0203H
        PUBLIC ??init_timer?relay
        FUNCTION ??init_timer?relay,0203H
        PUBLIC ??start_pwm?relay
        FUNCTION ??start_pwm?relay,0203H
        PUBLIC AppTitle
        PUBLIC DataBuf
        FUNCTION Delay_MS,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION GetDataLen,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC LedState
        FUNCTION MotorData,0203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC NodeData
        PUBWEAK P0DIR
        PUBWEAK P0SEL
        PUBWEAK PERCFG
        PUBLIC SendData
        FUNCTION SendData,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 22, STACK
        FUNCTION SerialApp_CallBack,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SerialApp_ClusterList
        PUBLIC SerialApp_Init
        FUNCTION SerialApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 47, STACK
        PUBLIC SerialApp_ProcessEvent
        FUNCTION SerialApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 35, STACK
        FUNCTION SerialApp_ProcessMSGCmd,0a1203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 44, STACK
        FUNCTION SerialApp_Send,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        FUNCTION SerialApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 30, STACK
        PUBLIC SerialApp_SimpleDesc
        PUBLIC SerialApp_TaskID
        PUBLIC SerialApp_epDesc
        PUBWEAK T1CC0H
        PUBWEAK T1CC0L
        PUBWEAK T1CTL
        PUBLIC TxBuffer
        FUNCTION XorCheckSum,0203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBWEAK _A_P0
        PUBLIC _IRQ_timer1
        FUNCTION _IRQ_timer1,0233H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        PUBLIC init_port
        FUNCTION init_port,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC init_timer
        FUNCTION init_timer,0203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC phaseccw
        PUBLIC phasecw
        PUBLIC start_pwm
        FUNCTION start_pwm,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ucDirection
        PUBLIC ucEdDir
        PUBLIC ucSpeed
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
osal_memset         SYMBOL "osal_memset"
osal_strlen         SYMBOL "osal_strlen"
osal_memcpy         SYMBOL "osal_memcpy"
LCD_write_EN_string SYMBOL "LCD_write_EN_string"
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
osal_rand           SYMBOL "osal_rand"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
HalLedSet           SYMBOL "HalLedSet"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
osal_set_event      SYMBOL "osal_set_event"
HalUARTWrite        SYMBOL "HalUARTWrite"
HalUARTRead         SYMBOL "HalUARTRead"
DHT11               SYMBOL "DHT11"
Onboard_wait        SYMBOL "Onboard_wait"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??DHT11?relay       SYMBOL "?relay", DHT11
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??LCD_write_EN_string?relay SYMBOL "?relay", LCD_write_EN_string
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_memset?relay SYMBOL "?relay", osal_memset
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
??osal_strlen?relay SYMBOL "?relay", osal_strlen
SendData            SYMBOL "SendData"
??SendData?relay    SYMBOL "?relay", SendData
SerialApp_Init      SYMBOL "SerialApp_Init"
??SerialApp_Init?relay SYMBOL "?relay", SerialApp_Init
SerialApp_ProcessEvent SYMBOL "SerialApp_ProcessEvent"
??SerialApp_ProcessEvent?relay SYMBOL "?relay", SerialApp_ProcessEvent
_IRQ_timer1         SYMBOL "_IRQ_timer1"
`??_IRQ_timer1??INTVEC 75` SYMBOL "??INTVEC 75", _IRQ_timer1
init_port           SYMBOL "init_port"
??init_port?relay   SYMBOL "?relay", init_port
init_timer          SYMBOL "init_timer"
??init_timer?relay  SYMBOL "?relay", init_timer
start_pwm           SYMBOL "start_pwm"
??start_pwm?relay   SYMBOL "?relay", start_pwm

        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_strlen
        FUNCTION osal_strlen,0202H
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN LCD_write_EN_string
        FUNCTION LCD_write_EN_string,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DHT11
        FUNCTION DHT11,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??DHT11?relay
        FUNCTION ??DHT11?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??LCD_write_EN_string?relay
        FUNCTION ??LCD_write_EN_string?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??osal_strlen?relay
        FUNCTION ??osal_strlen?relay,00H
        EXTERN Color
        EXTERN Color_BK
        EXTERN shidu
        EXTERN wendu

// G:\study\Gateway_TFT\µÚ7ÕÂ WIFI¿ª·¢°åÊµÑé\RT5350ÊµÑé\21.°²×¿Í¨¹ý¿ª·¢°å¿ØÖÆzigbeeÍøÂç\WiFi-V2.0\WSN-ZigBee\ZStack-251a\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c
//    1 /*********************************************************************
//    2 * INCLUDES
//    3 */
//    4 #include <stdio.h>
//    5 #include <string.h>
//    6 
//    7 #include "AF.h"
//    8 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0daH
// unsigned char volatile __sfr T1CC0L
T1CC0L:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0dbH
// unsigned char volatile __sfr T1CC0H
T1CC0H:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0e4H
// unsigned char volatile __sfr T1CTL
T1CTL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f1H
// unsigned char volatile __sfr PERCFG
PERCFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1
//    9 #include "OSAL_Tasks.h"
//   10 #include "SerialApp.h"
//   11 #include "ZDApp.h"
//   12 #include "ZDObject.h"
//   13 #include "ZDProfile.h"
//   14 
//   15 #include "hal_drivers.h"
//   16 #include "hal_key.h"
//   17 #if defined ( LCD_SUPPORTED )
//   18 #include "hal_lcd.h"
//   19 #endif
//   20 #include "hal_led.h"
//   21 #include "hal_uart.h"
//   22 
//   23 #include "DHT11.h"
//   24 #include "nwk_globals.h"
//   25 
//   26 
//   27 //---------------------------------------------------------------------
//   28 //±ê×¼°æ²»Í¬µÄÖÕ¶ËÐèÒªÐÞ¸Ä´ËID,ÓÃÓÚÊ¶±ðÐ­µ÷Æ÷·¢¹ýÀ´µÄÊý¾Ý£¬IDÏàÍ¬Ôò´¦Àí

        RSEG XDATA_I:XDATA:NOROOT(0)
//   29 static uint16 EndDeviceID = 0x0001 ; //ÖÕ¶ËID£¬ÖØÒª
EndDeviceID:
        DATA16
        DS 2
        REQUIRE `?<Initializer for EndDeviceID>`
        REQUIRE __INIT_XDATA_I
//   30 //---------------------------------------------------------------------
//   31 
//   32 //¶¨Òå½Úµã¹¦ÄÜÓÃ×÷´«¸ÐÆ÷»òÆøÌå+·äÃùÆ÷,»¹ÊÇ²½½øµç»ú
//   33 #define WSN_SENSOR     //ÓÃ×÷4¸ö²É¼¯½Úµã
//   34 //#define WSN_BEEP     //ÆøÌå+·äÃùÆ÷ EndDeviceID=5
//   35 //#define WSN_STEP     //²½½øµç»ú    EndDeviceID=6
//   36 
//   37 
//   38 
//   39 #define LAMP_PIN     P0_5  //¶¨ÒåP0.5¿ÚÎª¼ÌµçÆ÷ÊäÈë¶Ë
//   40 #define GAS_PIN      P0_6  //¶¨ÒåP0.6¿ÚÎªÑÌÎí´«¸ÐÆ÷µÄÊäÈë¶Ë  
//   41 #define BEEP_PIN     P0_7  //¶¨ÒåP0.7¿ÚÎª·äÃùÆ÷µÄÊä³ö¶Ë  
//   42 
//   43 #define A1 P0_4            //¶¨Òå²½½øµç»úÁ¬½Ó¶Ë¿Ú
//   44 #define B1 P0_5
//   45 #define C1 P0_6
//   46 #define D1 P0_7
//   47 
//   48 
//   49 #define UART0        0x00
//   50 #define MAX_NODE     0x04
//   51 #define UART_DEBUG   0x00 //µ÷ÊÔºê,Í¨¹ý´®¿ÚÊä³öÐ­µ÷Æ÷ºÍÖÕ¶ËµÄIEEE¡¢¶ÌµØÖ·
//   52 #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
//   53 
//   54 #define TIMER1_RUN()  T1CTL|=0X03
//   55 #define TIMER1_STOP() T1CTL&=~0X03
//   56 /*********************************************************************
//   57 * CONSTANTS
//   58 */
//   59 
//   60 #if !defined( SERIAL_APP_PORT )
//   61 #define SERIAL_APP_PORT  0
//   62 #endif
//   63 
//   64 #if !defined( SERIAL_APP_BAUD )
//   65 #define SERIAL_APP_BAUD  HAL_UART_BR_115200  //HAL_UART_BR_38400
//   66 #endif
//   67 
//   68 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//   69 #if !defined( SERIAL_APP_THRESH )
//   70 #define SERIAL_APP_THRESH  64
//   71 #endif
//   72 
//   73 #if !defined( SERIAL_APP_RX_SZ )
//   74 #define SERIAL_APP_RX_SZ  128
//   75 #endif
//   76 
//   77 #if !defined( SERIAL_APP_TX_SZ )
//   78 #define SERIAL_APP_TX_SZ  128
//   79 #endif
//   80 
//   81 // Millisecs of idle time after a byte is received before invoking Rx callback.
//   82 #if !defined( SERIAL_APP_IDLE )
//   83 #define SERIAL_APP_IDLE  6
//   84 #endif
//   85 
//   86 // Loopback Rx bytes to Tx for throughput testing.
//   87 #if !defined( SERIAL_APP_LOOPBACK )
//   88 #define SERIAL_APP_LOOPBACK  FALSE
//   89 #endif
//   90 
//   91 // This is the max byte count per OTA message.
//   92 #if !defined( SERIAL_APP_TX_MAX )
//   93 #define SERIAL_APP_TX_MAX  20
//   94 #endif
//   95 
//   96 #define SERIAL_APP_RSP_CNT  4
//   97 
//   98 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   99 const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =
SerialApp_ClusterList:
        DATA16
        DW 1
        DW 0
//  100 {
//  101   SERIALAPP_CLUSTERID
//  102 };
//  103 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  104 const SimpleDescriptionFormat_t SerialApp_SimpleDesc =
SerialApp_SimpleDesc:
        DB 11
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SerialApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SerialApp_ClusterList
//  105 {
//  106   SERIALAPP_ENDPOINT,              //  int   Endpoint;
//  107   SERIALAPP_PROFID,                //  uint16 AppProfId[2];
//  108   SERIALAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  109   SERIALAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  110   SERIALAPP_FLAGS,                 //  int   AppFlags:4;
//  111   SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  112   (cId_t *)SerialApp_ClusterList,  //  byte *pAppInClusterList;
//  113   SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
//  114   (cId_t *)SerialApp_ClusterList   //  byte *pAppOutClusterList;
//  115 };
//  116 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  117 const endPointDesc_t SerialApp_epDesc =
SerialApp_epDesc:
        DB 11
        DATA16
        DW SerialApp_TaskID
        DW SerialApp_SimpleDesc
        DATA8
        DB 0
//  118 {
//  119   SERIALAPP_ENDPOINT,
//  120   &SerialApp_TaskID,
//  121   (SimpleDescriptionFormat_t *)&SerialApp_SimpleDesc,
//  122   noLatencyReqs
//  123 };
//  124 
//  125 
//  126 /*********************************************************************
//  127 * GLOBAL VARIABLES
//  128 */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  129 uint8 AppTitle[20] = "ALD WSN-system"; //Ó¦ÓÃ³ÌÐòÃû³Æ
AppTitle:
        DATA8
        DS 20
        REQUIRE `?<Initializer for AppTitle>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  130 uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
SerialApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  131 
//  132 
//  133 /*********************************************************************
//  134 * LOCAL VARIABLES
//  135 */
//  136 #ifdef WSN_SENSOR

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 static bool SendFlag = 0;
SendFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  138 #endif
//  139 static uint8 SerialApp_MsgID;
//  140 
//  141 static afAddrType_t SerialApp_TxAddr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  142 static afAddrType_t Broadcast_DstAddr;
Broadcast_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  143 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 static uint8 SerialApp_TxSeq;
SerialApp_TxSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
SerialApp_TxBuf:
        DS 21
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  146 static uint8 SerialApp_TxLen;
SerialApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  147 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  148 static afAddrType_t SerialApp_RxAddr;
SerialApp_RxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  149 static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];
SerialApp_RspBuf:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  150 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  151 static devStates_t SerialApp_NwkState;
SerialApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  152 static afAddrType_t SerialApp_TxAddr;
SerialApp_TxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  153 static uint8 SerialApp_MsgID;
SerialApp_MsgID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  154 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  155 uint8 NodeData[MAX_NODE][5];         //ÖÕ¶ËÊý¾Ý»º³åÇø 0=ÎÂ¶È 1=Êª¶È 2=ÆøÌå 3=µÆ
NodeData:
        DS 20
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  156 uint8 TxBuffer[128];
TxBuffer:
        DS 128
        REQUIRE __INIT_XDATA_Z
//  157 
//  158 //µç»úÏà¹ØµÄ±äÁ¿

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  159 uint8 LedState = 0;
LedState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  160 uint8 ucEdDir = 1;      //ÖÕ¶Ë1ÎªÕý×ª  2Îª·´×ª
ucEdDir:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ucEdDir>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  161 uint8 ucDirection = 1;  //1ÎªÕý×ª  2Îª·´×ª
ucDirection:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ucDirection>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  162 uint8 ucSpeed = 2;      //ËÙ¶È2-10Ö®¼ä
ucSpeed:
        DATA8
        DS 1
        REQUIRE `?<Initializer for ucSpeed>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  163 uint8 DataBuf[3];
DataBuf:
        DS 3
        REQUIRE __INIT_XDATA_Z
//  164 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  165 uchar phasecw[4] ={0x80,0x40,0x20,0x10};//Õý×ª µç»úµ¼Í¨ÏàÐò D-C-B-A
phasecw:
        DATA32
        DS 4
        REQUIRE `?<Initializer for phasecw>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  166 uchar phaseccw[4]={0x10,0x20,0x40,0x80};//·´×ª µç»úµ¼Í¨ÏàÐò A-B-C-D
phaseccw:
        DATA32
        DS 4
        REQUIRE `?<Initializer for phaseccw>`
        REQUIRE __INIT_XDATA_I
//  167 /*********************************************************************
//  168 * LOCAL FUNCTIONS
//  169 */
//  170 
//  171 static void SerialApp_HandleKeys( uint8 shift, uint8 keys );
//  172 static void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  173 static void SerialApp_Send(void);
//  174 static void SerialApp_Resp(void);
//  175 static void SerialApp_CallBack(uint8 port, uint8 event);
//  176 
//  177 #if UART_DEBUG  
//  178 static void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr);
//  179 static void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr);
//  180 #endif
//  181 static void AfSendAddrInfo(void);
//  182 static void SerialApp_SendPeriodicMessage( void );
//  183 static uint8 GetDataLen(uint8 fc);
//  184 static uint8 GetLamp( void );
//  185 static uint8 GetGas( void );
//  186 static uint8 XorCheckSum(uint8 * pBuf, uint8 len);
//  187 uint8 SendData(uint8 addr, uint8 FC);
//  188 
//  189 //WSN_BEEP
//  190 void init_timer(void);
//  191 void init_port(void);
//  192 void start_pwm(void) ;
//  193 __interrupt void _IRQ_timer1(void);
//  194 
//  195 //WSN_STEP
//  196 static void MotorData(uchar data);
//  197 static void MotorCW(void);
//  198 static void MotorCCW(void);
//  199 static void MotorStop(void);
//  200 
//  201 static void Delay_MS(unsigned int Time);
//  202 #ifdef WSN_STEP
//  203 static void InitStepMotor(void);
//  204 #endif
//  205 /*********************************************************************
//  206 * @fn      SerialApp_Init
//  207 *
//  208 * @brief   This is called during OSAL tasks' initialization.
//  209 *
//  210 * @param   task_id - the Task ID assigned by OSAL.
//  211 *
//  212 * @return  none
//  213 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  214 void SerialApp_Init( uint8 task_id )
SerialApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SerialApp_Init
        CODE
//  215 {
        FUNCALL SerialApp_Init, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, osal_strlen
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 1, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, LCD_write_EN_string
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     ?V0 + 0,R1
//  216   halUARTCfg_t uartConfig;
//  217   
//  218 #ifdef WSN_SENSOR
//  219   P0SEL &= ~0x20;         //ÉèÖÃP0.5¿ÚÎªÆÕÍ¨IO
        ANL     0xf3,#0xdf
//  220   P0DIR |= 0x20;          //ÉèÖÃP0.5ÎªÊä³ö
        ORL     0xfd,#0x20
//  221   LAMP_PIN = 1;           //¸ßµçÆ½¼ÌµçÆ÷¶Ï¿ª;µÍµçÆ½¼ÌµçÆ÷ÎüºÏ
        SETB    0x80.5
//  222   P0SEL &= ~0x40;         //ÉèÖÃP0.6ÎªÆÕÍ¨IO¿Ú
        ANL     0xf3,#0xbf
//  223   P0DIR &= ~0x40;         //P0.6¶¨ÒåÎªÊäÈë¿Ú
        ANL     0xfd,#0xbf
//  224   P0SEL &= ~0x80;         //P0_7ÅäÖÃ³ÉÍ¨ÓÃio
        ANL     0xf3,#0x7f
//  225 #elif defined WSN_BEEP
//  226   P0SEL &= ~0x40;         //ÉèÖÃP0.6ÎªÆÕÍ¨IO¿Ú
//  227   P0DIR &= ~0x40;         //P0.6¶¨ÒåÎªÊäÈë¿Ú
//  228   start_pwm();            //ÅäÖÃT1Êä³öPWM
//  229   TIMER1_STOP();          //Ä¬ÈÏ¹Ø±Õ·äÃùÆ÷
//  230   EndDeviceID = 0x0005;   //ÖÕ¶Ë5µÄÄÚ²¿±àºÅ  
//  231 #elif defined WSN_STEP
//  232   InitStepMotor();        //³õÊ¼»¯µç»úIOÒý½Å
//  233   EndDeviceID = 0x0006;   //ÖÕ¶Ë6µÄÄÚ²¿±àºÅ  
//  234 #endif
//  235 
//  236 #if defined(ZDO_COORDINATOR) 
//  237   EndDeviceID = 0x0000; 
//  238 #endif
//  239   
//  240   Color    = BLACK; //Ç°¾°É«
        MOV     DPTR,#Color
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  241   Color_BK = GREEN; //±³¾°É«
        MOV     DPTR,#Color_BK
        MOV     A,#-0x20
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
//  242   osal_memset(AppTitle, 0, 20);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#AppTitle & 0xff
        MOV     R3,#(AppTitle >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  243   //LCDÉÏÏÔÊ¾Ó¦ÓÃ³ÌÐòµÄ±êÌâ
//  244   if(EndDeviceID == 0x0001)
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SerialApp_Init_0
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_0:
        JNZ     ??SerialApp_Init_1
//  245     osal_memcpy(AppTitle, "ALD WSN-Node01", osal_strlen("ALD WSN-Node01"));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node01">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node01">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-Node01">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-Node01">` >> 8) & 0xff
        LJMP    ??SerialApp_Init_2 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 44)
//  246   else if(EndDeviceID == 0x0002)
??SerialApp_Init_1:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??SerialApp_Init_3
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_3:
        JNZ     ??SerialApp_Init_4
//  247     osal_memcpy(AppTitle, "ALD WSN-Node02", osal_strlen("ALD WSN-Node02"));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node02">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node02">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-Node02">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-Node02">` >> 8) & 0xff
        LJMP    ??SerialApp_Init_2 & 0xFFFF
        CFI CFA_XSP16 add(XSP16, 44)
//  248   else if(EndDeviceID == 0x0003)
??SerialApp_Init_4:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x3
        JNZ     ??SerialApp_Init_5
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_5:
        JNZ     ??SerialApp_Init_6
//  249     osal_memcpy(AppTitle, "ALD WSN-Node03", osal_strlen("ALD WSN-Node03"));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node03">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node03">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-Node03">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-Node03">` >> 8) & 0xff
        SJMP    ??SerialApp_Init_2
        CFI CFA_XSP16 add(XSP16, 44)
//  250   else if(EndDeviceID == 0x0004)
??SerialApp_Init_6:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x4
        JNZ     ??SerialApp_Init_7
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_7:
        JNZ     ??SerialApp_Init_8
//  251     osal_memcpy(AppTitle, "ALD WSN-Node04", osal_strlen("ALD WSN-Node04"));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-Node04">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-Node04">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-Node04">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-Node04">` >> 8) & 0xff
        SJMP    ??SerialApp_Init_2
        CFI CFA_XSP16 add(XSP16, 44)
//  252   else if(EndDeviceID == 0x0005)
??SerialApp_Init_8:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x5
        JNZ     ??SerialApp_Init_9
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_9:
        JNZ     ??SerialApp_Init_10
//  253     osal_memcpy(AppTitle, "ALD WSN-BEEP05", osal_strlen("ALD WSN-BEEP05"));    
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-BEEP05">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-BEEP05">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-BEEP05">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-BEEP05">` >> 8) & 0xff
        SJMP    ??SerialApp_Init_2
        CFI CFA_XSP16 add(XSP16, 44)
//  254   else if(EndDeviceID == 0x0006)
??SerialApp_Init_10:
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SerialApp_Init_11
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_Init_11:
        JNZ     ??SerialApp_Init_12
//  255     osal_memcpy(AppTitle, "stepping motor", osal_strlen("stepping motor")); 
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "stepping motor">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "stepping motor">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "stepping motor">` & 0xff
        MOV     R3,#(`?<Constant "stepping motor">` >> 8) & 0xff
        SJMP    ??SerialApp_Init_2
        CFI CFA_XSP16 add(XSP16, 44)
//  256   else
//  257     osal_memcpy(AppTitle, "ALD WSN-system", osal_strlen("ALD WSN-system")); 
??SerialApp_Init_12:
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,#`?<Constant "ALD WSN-system">` & 0xff
        MOV     ?V0 + 5,#(`?<Constant "ALD WSN-system">` >> 8) & 0xff
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 47)
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#`?<Constant "ALD WSN-system">` & 0xff
        MOV     R3,#(`?<Constant "ALD WSN-system">` >> 8) & 0xff
??SerialApp_Init_2:
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#AppTitle & 0xff
        MOV     R3,#(AppTitle >> 8) & 0xff
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 44)
//  258   
//  259   LCD_write_EN_string(64-7*osal_strlen((char *)AppTitle)/2,3,AppTitle); //ÏÔÊ¾±êÌâ
        ; Setup parameters for call to function LCD_write_EN_string
        MOV     R2,#0x3
        MOV     A,R2
        PUSH    A
        CFI CFA_SP SP+-1
        ; Setup parameters for call to function osal_strlen
        MOV     R2,#AppTitle & 0xff
        MOV     R3,#(AppTitle >> 8) & 0xff
        LCALL   ??osal_strlen?relay
        MOV     A,R2
        MOV     B,#0x7
        MUL     AB
        MOV     R2,A
        MOV     R0,B
        MOV     B,#0x7
        MOV     A,R3
        MUL     AB
        ADD     A,R0
        MOV     R3,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,#0x40
        CLR     C
        SUBB    A,R0
        MOV     R1,A
        MOV     R4,#AppTitle & 0xff
        MOV     A,#(AppTitle >> 8) & 0xff
        MOV     R5,A
        POP     A
        CFI CFA_SP SP+0
        MOV     R2,A
        LCALL   ??LCD_write_EN_string?relay
//  260   
//  261   SerialApp_TaskID = task_id;
        MOV     A,?V0 + 0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    @DPTR,A
//  262   //SerialApp_RxSeq = 0xC3;
//  263   afRegister( (endPointDesc_t *)&SerialApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SerialApp_epDesc & 0xff
        MOV     R3,#(SerialApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  264   RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     R1,?V0 + 0
        LCALL   ??RegisterForKeys?relay
//  265   
//  266   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  267   uartConfig.baudRate             = SERIAL_APP_BAUD;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  268   uartConfig.flowControl          = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  269   uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  270   uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  271   uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  272   uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  273   uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  274   uartConfig.callBackFunc         = SerialApp_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??SerialApp_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  275   HalUARTOpen (UART0, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  276   
//  277   //#if defined ( LCD_SUPPORTED )
//  278   //  HalLcdWriteString( "SerialApp", HAL_LCD_LINE_2 );
//  279   //#endif
//  280   //HalUARTWrite(UART0, "Init", 4);
//  281   //ZDO_RegisterForZDOMsg( SerialApp_TaskID, End_Device_Bind_rsp );
//  282   //ZDO_RegisterForZDOMsg( SerialApp_TaskID, Match_Desc_rsp );
//  283 }
        MOV     A,#0x1d
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 15)
        CFI Valid
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  284 
//  285 /*********************************************************************
//  286 * @fn      SerialApp_ProcessEvent
//  287 *
//  288 * @brief   Generic Application Task event processor.
//  289 *
//  290 * @param   task_id  - The OSAL assigned task ID.
//  291 * @param   events   - Bit map of events to process.
//  292 *
//  293 * @return  Event flags of all unprocessed events.
//  294 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  295 UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )
SerialApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SerialApp_ProcessEvent
        CODE
//  296 {
        FUNCALL SerialApp_ProcessEvent, SerialApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_ProcessMSGCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  297   (void)task_id;  // Intentionally unreferenced parameter
//  298   
//  299   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JZ      $+5
        LJMP    ??SerialApp_ProcessEvent_0 & 0xFFFF
//  300   {
//  301     afIncomingMSGPacket_t *MSGpkt;
//  302     
//  303     while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SerialApp_TaskID )) )
//  304     {
//  305       switch ( MSGpkt->hdr.event )
//  306       {
//  307       case ZDO_CB_MSG:
//  308         //SerialApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  309         break;
//  310         
//  311       case KEY_CHANGE:
//  312         SerialApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  313         break;
//  314         
//  315       case AF_INCOMING_MSG_CMD:
//  316         SerialApp_ProcessMSGCmd( MSGpkt );
//  317         break;
//  318         
//  319       case ZDO_STATE_CHANGE:
//  320         SerialApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  321         if ( (SerialApp_NwkState == DEV_ZB_COORD)
//  322             || (SerialApp_NwkState == DEV_ROUTER)
//  323               || (SerialApp_NwkState == DEV_END_DEVICE) )
//  324         {
//  325 #if defined(ZDO_COORDINATOR) //Ð­µ÷Æ÷Í¨¹ý´®¿ÚÊä³ö×ÔÉí¶ÌµØÖ·¡¢IEEE  
//  326           Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
//  327           Broadcast_DstAddr.endPoint = SERIALAPP_ENDPOINT;
//  328           Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
//  329 #if UART_DEBUG           
//  330           PrintAddrInfo( NLME_GetShortAddr(), aExtendedAddress + Z_EXTADDR_LEN - 1);
//  331 #endif 
//  332           //³õÊ¼»¯µÆµÄ×´Ì¬£¬1ÎªÏ¨Ãð×´Ì¬£¬0ÎªµãÁÁ
//  333           NodeData[0][3] = 1;
//  334           NodeData[1][3] = 1;
//  335           NodeData[2][3] = 1;
//  336           NodeData[3][3] = 1;
//  337 #else                        //ÖÕ¶ËÎÞÏß·¢ËÍ¶ÌµØÖ·¡¢IEEE   
//  338           AfSendAddrInfo();
//  339 #ifdef WSN_BEEP              //·äÃùÆ÷ºÍÆøÌåÊµÑéÊ±×Ô¶¯¼ì²âÆøÌå·¢ÏÖÒì³£¾Í±¨¾¯
//  340           osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
//  341                              SERIALAPP_SEND_PERIODIC_TIMEOUT );
//  342           //(SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
//  343 #endif
//  344           
//  345 #endif
//  346         }
//  347         break;				
//  348       default:
//  349         break;
//  350       }
//  351       
//  352       osal_msg_deallocate( (uint8 *)MSGpkt );
//  353     }
//  354     
//  355     return ( events ^ SYS_EVENT_MSG );
//  356   }
//  357   
//  358   //ÔÚ´ËÊÂ¼þÖÐ¿ÉÒÔ¶¨Ê±ÏòÐ­µ÷Æ÷·¢ËÍ½Úµã´«¸ÐÆ÷²ÎÊýÐÅÏ¢
//  359   if ( events & SERIALAPP_SEND_PERIODIC_EVT )
        MOV     A,R6
        ANL     A,#0x3
        JNZ     $+5
        LJMP    ??SerialApp_ProcessEvent_1 & 0xFFFF
//  360   {
//  361     SerialApp_SendPeriodicMessage();
        ; Setup parameters for call to function SerialApp_SendPeriodicMessage
        LCALL   ??SerialApp_SendPeriodicMessage?relay
//  362     
//  363     osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
//  364                        (SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0x18
        MOV     R4,A
        CLR     A
        ADDC    A,#0x3
        MOV     R5,A
        LCALL   ?Subroutine8 & 0xFFFF
//  365     
//  366     return (events ^ SERIALAPP_SEND_PERIODIC_EVT);
??CrossCallReturnLabel_10:
        MOV     A,R6
        XRL     A,#0x3
??SerialApp_ProcessEvent_2:
        MOV     R2,A
        MOV     A,R7
??SerialApp_ProcessEvent_3:
        MOV     R3,A
        LJMP    ??SerialApp_ProcessEvent_4 & 0xFFFF
//  367   }
??SerialApp_ProcessEvent_5:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SerialApp_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??SerialApp_ProcessEvent_6
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??SerialApp_ProcessEvent_6
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      $+5
        LJMP    ??SerialApp_ProcessEvent_7 & 0xFFFF
??SerialApp_ProcessEvent_6:
        MOV     DPTR,#`?<Constant {0}>_2`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x3b
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_13:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 2,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 3,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 2,#0xb
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_TxAddr & 0xff
        MOV     R3,#(SerialApp_TxAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
??SerialApp_ProcessEvent_7:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??SerialApp_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SerialApp_ProcessEvent_8
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SerialApp_ProcessEvent_9
        ADD     A,#0x5a
        JZ      ??SerialApp_ProcessEvent_10
        ADD     A,#-0x11
        JNZ     $+5
        LJMP    ??SerialApp_ProcessEvent_5 & 0xFFFF
        SJMP    ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_10:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     C,0xE0 /* A   */.5
        JNC     ??SerialApp_ProcessEvent_11
        MOV     DPTR,#SendFlag
        MOVX    A,@DPTR
        JNZ     ??SerialApp_ProcessEvent_12
        MOV     A,#0x1
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,A
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x18
        MOV     R5,#0x3
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_12:
        SJMP    ??SerialApp_ProcessEvent_11
??SerialApp_ProcessEvent_12:
        CLR     A
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
??SerialApp_ProcessEvent_11:
        MOV     A,?V0 + 2
        MOV     C,0xE0 /* A   */.0
        JNC     ??SerialApp_ProcessEvent_7
        SETB    B.0
        MOV     C,0x80.5
        JNB     B.0,??SerialApp_ProcessEvent_13
        CPL     C
??SerialApp_ProcessEvent_13:
        MOV     0x80.5,C
        SJMP    ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_9:
        ; Setup parameters for call to function SerialApp_ProcessMSGCmd
        LCALL   ??SerialApp_ProcessMSGCmd?relay
        SJMP    ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_8:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??SerialApp_ProcessEvent_3 & 0xFFFF
//  368   
//  369   if ( events & SERIALAPP_SEND_EVT )
??SerialApp_ProcessEvent_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SerialApp_ProcessEvent_14
//  370   {
//  371     SerialApp_Send();
        ; Setup parameters for call to function SerialApp_Send
        LCALL   ??SerialApp_Send?relay
//  372     return ( events ^ SERIALAPP_SEND_EVT );
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
//  373   }
//  374   
//  375   if ( events & SERIALAPP_RESP_EVT )
??SerialApp_ProcessEvent_14:
        ANL     A,#0x2
        JZ      ??SerialApp_ProcessEvent_15
//  376   {
//  377     SerialApp_Resp();
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,#SerialApp_RspBuf & 0xff
        MOV     ?V0 + 1,#(SerialApp_RspBuf >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 35)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_RxAddr & 0xff
        MOV     R3,#(SerialApp_RxAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,R1
        JZ      ??SerialApp_ProcessEvent_16
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  378     return ( events ^ SERIALAPP_RESP_EVT );
??SerialApp_ProcessEvent_16:
        MOV     A,R6
        XRL     A,#0x2
        LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
//  379   }
//  380   
//  381   return ( 0 ); 
??SerialApp_ProcessEvent_15:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SerialApp_ProcessEvent_4:
        MOV     A,#0xb
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock2
        REQUIRE _A_P0
//  382 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond3 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond4 Using cfiCommon0
        CFI (cfiCond4) NoFunction
        CFI (cfiCond4) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond4) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond4) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond4) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond4) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond4) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond4) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond4) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond4) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond4) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond4) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond4) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond4) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond4) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond4) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond4) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond4) CFA_SP SP+0
        CFI (cfiCond4) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker5 Using cfiCommon1
        CFI (cfiPicker5) NoFunction
        CFI (cfiPicker5) Picker
        MOV     R2,#0x3
        CFI EndBlock cfiCond3
        CFI EndBlock cfiCond4
        CFI EndBlock cfiPicker5
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
        CFI Block cfiCond6 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond7 Using cfiCommon0
        CFI (cfiCond7) NoFunction
        CFI (cfiCond7) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond7) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond7) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond7) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond7) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond7) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond7) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond7) CFA_SP SP+0
        CFI (cfiCond7) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 26)
        CFI Block cfiPicker9 Using cfiCommon1
        CFI (cfiPicker9) NoFunction
        CFI (cfiPicker9) Picker
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        RET
        CFI EndBlock cfiCond6
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiPicker9
//  383 
//  384 /*********************************************************************
//  385 * @fn      SerialApp_HandleKeys
//  386 *
//  387 * @brief   Handles all key events for this device.
//  388 *
//  389 * @param   shift - true if in shift/alt.
//  390 * @param   keys  - bit field for key events.
//  391 *
//  392 * @return  none
//  393 */
//  394 void SerialApp_HandleKeys( uint8 shift, uint8 keys )
//  395 { 
//  396   if ( keys & HAL_KEY_SW_6 ) //°´S1¼üÆô¶¯»òÍ£Ö¹ÖÕ¶Ë¶¨Ê±ÉÏ±¨Êý¾Ý 
//  397   {
//  398 #ifdef WSN_SENSOR
//  399     if(SendFlag == 0)
//  400     {
//  401       SendFlag = 1;
//  402       HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
//  403       osal_start_timerEx( SerialApp_TaskID,
//  404                          SERIALAPP_SEND_PERIODIC_EVT,
//  405                          SERIALAPP_SEND_PERIODIC_TIMEOUT );
//  406     }
//  407     else
//  408     {      
//  409       SendFlag = 0;
//  410       HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
//  411       osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT);
//  412     }
//  413 #endif
//  414   }
//  415   
//  416   if ( keys & HAL_KEY_SW_1 ) //°´S2
//  417   {
//  418     LAMP_PIN = ~LAMP_PIN;
//  419   }
//  420   
//  421 }
//  422 

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond10 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond11 Using cfiCommon0
        CFI (cfiCond11) NoFunction
        CFI (cfiCond11) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond11) CFA_SP SP+0
        CFI (cfiCond11) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker12 Using cfiCommon1
        CFI (cfiPicker12) NoFunction
        CFI (cfiPicker12) Picker
        MOV     R2,DPL
        MOV     R3,DPH
        CFI EndBlock cfiCond10
        CFI EndBlock cfiCond11
        CFI EndBlock cfiPicker12
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
        CFI Block cfiCond13 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_15
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 47)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+0
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_17
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+0
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 29)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        RET
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  423 void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
SerialApp_ProcessMSGCmd:
        CFI Block cfiBlock19 Using cfiCommon0
        CFI Function SerialApp_ProcessMSGCmd
        CODE
//  424 {
        FUNCALL SerialApp_ProcessMSGCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, MotorData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, MotorData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, Delay_MS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, MotorData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, Delay_MS
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
//  425   uint16 i, shortAddr;
//  426   uint8 *pIeeeAddr; 
//  427   uint8 delay;
//  428   uint8 afRxData[30]={0};
        MOV     DPTR,#`?<Constant {0}>`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x1e
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  429   
//  430   //²éÑ¯µ¥¸öÖÕ¶ËÉÏËùÓÐ´«¸ÐÆ÷µÄÊý¾Ý 3A 00 01 02 39 23  ÏìÓ¦£º3A 00 01 02 00 00 00 00 xor 23
//  431   switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SerialApp_ProcessMSGCmd>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??CrossCallReturnLabel_11
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SerialApp_ProcessMSGCmd_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SerialApp_ProcessMSGCmd_1
        CODE
//  432   {
//  433     // A message with a serial data block to be transmitted on the serial port.
//  434   case SERIALAPP_CLUSTERID:
//  435     osal_memcpy(afRxData, pkt->cmd.Data, pkt->cmd.DataLength);
??SerialApp_ProcessMSGCmd_0:
        ; Setup parameters for call to function osal_memcpy
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_6:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R2
        ADD     A,#0x20
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_14:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
//  436     switch(afRxData[0]) //¼òµ¥Ð­ÒéÃüÁî×Ö½âÎö
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x3a
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_11 & 0xFFFF
//  437     {
//  438 #if defined(ZDO_COORDINATOR)
//  439     case 0x3B:  //ÊÕµ½ÖÕ¶ËÎÞÏß·¢¹ýÀ´µÄ¶ÌµØÖ·ºÍIEEEµØÖ·,Í¨¹ý´®¿ÚÊä³öÏÔÊ¾      
//  440       shortAddr=(afRxData[1]<<8)|afRxData[2];
//  441       pIeeeAddr = &afRxData[3];
//  442 #if UART_DEBUG
//  443       PrintAddrInfo(shortAddr, pIeeeAddr + Z_EXTADDR_LEN - 1);
//  444 #endif   
//  445       break;
//  446     case 0x3A:	
//  447       if(afRxData[3] == 0x02) //ÊÕµ½ÖÕ¶Ë´«¹ýÀ´µÄ´«¸ÐÆ÷Êý¾Ý²¢±£´æ
//  448       {  
//  449         NodeData[afRxData[2]-1][0] = afRxData[4];
//  450         NodeData[afRxData[2]-1][1] = afRxData[5];
//  451         NodeData[afRxData[2]-1][2] = afRxData[6];
//  452         NodeData[afRxData[2]-1][3] = afRxData[7];
//  453         NodeData[afRxData[2]-1][4] = 0x00;
//  454       }
//  455       
//  456 #if UART_DEBUG
//  457       HalUARTWrite (UART0, NodeData[afRxData[3]-1], 4); //µ÷ÊÔÊ±Í¨¹ý´®¿ÚÊä³ö
//  458       HalUARTWrite (UART0, "\n", 1);
//  459 #endif            
//  460       break;
//  461 #else  
//  462     case 0x3A:  //¿ª¹ØµÆÉè±¸          
//  463       if(afRxData[3] == 0x0A || afRxData[3] == 0x0B || afRxData[3] == 0x0C) //¿ØÖÆÖÕ¶Ë          
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xa
        JZ      ??SerialApp_ProcessMSGCmd_2
        MOVX    A,@DPTR
        XRL     A,#0xb
        JZ      ??SerialApp_ProcessMSGCmd_2
        MOVX    A,@DPTR
        XRL     A,#0xc
        JNZ     ??SerialApp_ProcessMSGCmd_3
//  464       {  
//  465         if(EndDeviceID == afRxData[2] || afRxData[2]==0xFF)
??SerialApp_ProcessMSGCmd_2:
        MOV     DPTR,#EndDeviceID
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPH,#(EndDeviceID >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??SerialApp_ProcessMSGCmd_4
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessMSGCmd_4:
        JZ      ??SerialApp_ProcessMSGCmd_5
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_11 & 0xFFFF
//  466         {
//  467           if(afRxData[4] == 0)
??SerialApp_ProcessMSGCmd_5:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??SerialApp_ProcessMSGCmd_6
//  468           {
//  469             LAMP_PIN = 0;
        CLR     0x80.5
//  470             HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
??SerialApp_ProcessMSGCmd_7:
        MOV     R2,#0x0
??SerialApp_ProcessMSGCmd_8:
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
        LJMP    ??CrossCallReturnLabel_11 & 0xFFFF
//  471           }
//  472           else
//  473           {
//  474             LAMP_PIN = 1;
??SerialApp_ProcessMSGCmd_6:
        SETB    0x80.5
//  475             HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
??SerialApp_ProcessMSGCmd_9:
        MOV     R2,#0x1
        SJMP    ??SerialApp_ProcessMSGCmd_8
//  476           }
//  477         }
//  478         break;
//  479       }	
//  480       else if(afRxData[3] == 0x07)      //·äÃùÆ÷ ¹¦ÄÜÂëÎª07
??SerialApp_ProcessMSGCmd_3:
        MOVX    A,@DPTR
        XRL     A,#0x7
        JNZ     ??SerialApp_ProcessMSGCmd_10
//  481       {
//  482         if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)  //·äÃùÆ÷ EndDeviceIDÎª05
        MOV     DPTR,#EndDeviceID
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPH,#(EndDeviceID >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??SerialApp_ProcessMSGCmd_11
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessMSGCmd_11:
        JZ      ??SerialApp_ProcessMSGCmd_12
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_11 & 0xFFFF
//  483         {
//  484           if(afRxData[4] == 0)
??SerialApp_ProcessMSGCmd_12:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        JNZ     ??SerialApp_ProcessMSGCmd_13
//  485           {
//  486             TIMER1_STOP();               //ÊÕµ½Ð­µ÷·¢³öµÄ·äÃùÆ÷²»ÏìµÄÖ¸Áî
        ANL     0xe4,#0xfc
//  487             HalLedSet ( HAL_LED_2, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        SJMP    ??SerialApp_ProcessMSGCmd_7
//  488           }
//  489           else
//  490           {
//  491             TIMER1_RUN();               //ÊÕµ½Ð­µ÷·¢³öµÄ·äÃùÆ÷ÏìµÄÖ¸Áî
??SerialApp_ProcessMSGCmd_13:
        ORL     0xe4,#0x3
//  492             HalLedSet ( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        SJMP    ??SerialApp_ProcessMSGCmd_9
//  493           }
//  494         } 
//  495       }
//  496       else if(afRxData[3] == 0x08)    //µç»ú ¹¦ÄÜÂëÎª08
??SerialApp_ProcessMSGCmd_10:
        MOVX    A,@DPTR
        XRL     A,#0x8
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_11 & 0xFFFF
//  497       {
//  498         if(EndDeviceID == afRxData[2] || afRxData[2] == 0xFF)//µç»ú EndDeviceIDÎª06
        MOV     DPTR,#EndDeviceID
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPH,#(EndDeviceID >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??SerialApp_ProcessMSGCmd_14
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessMSGCmd_14:
        JZ      ??SerialApp_ProcessMSGCmd_15
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CPL     A
        JZ      $+5
        LJMP    ??CrossCallReturnLabel_11 & 0xFFFF
//  499         {
//  500           ucEdDir = afRxData[4];      //±£´æÐý×ª·½Ïò¸øµ÷ËÙÓÃ
??SerialApp_ProcessMSGCmd_15:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     DPTR,#ucEdDir
        MOVX    @DPTR,A
//  501           MotorStop();                //Í£Ö¹×ª¶¯
        ; Setup parameters for call to function MotorData
        MOV     R1,#0x0
        LCALL   ??MotorData?relay
//  502           if(afRxData[4] == 0x02)   
        MOV     A,#0x2
        XRL     A,R6
        JNZ     ??SerialApp_ProcessMSGCmd_16
//  503           {
//  504             for(i=0;i<2000;i++)
        MOV     R6,#-0x30
        MOV     R7,#0x7
//  505               MotorCW();              //Ë³Ê±Õë×ª¶¯
??SerialApp_ProcessMSGCmd_17:
        MOV     ?V0 + 2,#0x0
??SerialApp_ProcessMSGCmd_18:
        ; Setup parameters for call to function MotorData
        MOV     ?V0 + 0,?V0 + 2
        MOV     A,#phasecw & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(phasecw >> 8) & 0xff
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        JC      ??SerialApp_ProcessMSGCmd_18
        LCALL   ?Subroutine10 & 0xFFFF
//  506           }
??CrossCallReturnLabel_8:
        JZ      ??CrossCallReturnLabel_11
        SJMP    ??SerialApp_ProcessMSGCmd_17
//  507           else if(afRxData[4] == 0x01)//×ó×ª±ê¼Ç 
??SerialApp_ProcessMSGCmd_16:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??CrossCallReturnLabel_11
//  508           {
//  509             for(i=0;i<2000;i++)
        MOV     R6,#-0x30
        MOV     R7,#0x7
//  510               MotorCCW();             //ÄæÊ±Õë×ª¶¯
??SerialApp_ProcessMSGCmd_19:
        MOV     ?V0 + 2,#0x0
??SerialApp_ProcessMSGCmd_20:
        ; Setup parameters for call to function MotorData
        MOV     ?V0 + 0,?V0 + 2
        MOV     A,#phaseccw & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(phaseccw >> 8) & 0xff
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        JC      ??SerialApp_ProcessMSGCmd_20
        LCALL   ?Subroutine10 & 0xFFFF
//  511           }
//  512         }
//  513       }
//  514 #endif
//  515       default :
//  516         break;
//  517       }
??CrossCallReturnLabel_9:
        JZ      ??CrossCallReturnLabel_11
        SJMP    ??SerialApp_ProcessMSGCmd_19
//  518       break;
//  519       // A response to a received serial data block.
//  520     case SERIALAPP_CLUSTERID2:
//  521       if ((pkt->cmd.Data[1] == SerialApp_TxSeq) &&
//  522           ((pkt->cmd.Data[0] == OTA_SUCCESS) || (pkt->cmd.Data[0] == OTA_DUP_MSG)))
??SerialApp_ProcessMSGCmd_1:
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPTR,#SerialApp_TxSeq
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??SerialApp_ProcessMSGCmd_21
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        JZ      ??SerialApp_ProcessMSGCmd_22
        MOV     A,R2
        ADD     A,#0x22
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SerialApp_ProcessMSGCmd_21
//  523       {
//  524         SerialApp_TxLen = 0;
??SerialApp_ProcessMSGCmd_22:
        MOV     DPTR,#SerialApp_TxLen
        CLR     A
        MOVX    @DPTR,A
//  525         osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_EVT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,A
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        SJMP    ??CrossCallReturnLabel_11
//  526       }
//  527       else
//  528       {
//  529         // Re-start timeout according to delay sent from other device.
//  530         delay = BUILD_UINT16( pkt->cmd.Data[2], pkt->cmd.Data[3] );
//  531         osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_EVT, delay );
??SerialApp_ProcessMSGCmd_21:
        ; Setup parameters for call to function osal_start_timerEx
        LCALL   ?Subroutine7 & 0xFFFF
//  532       }
//  533       break;
//  534       
//  535     default:
//  536       break;
//  537     }
??CrossCallReturnLabel_5:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#0x1
        LCALL   ??Subroutine12_0 & 0xFFFF
//  538   }
??CrossCallReturnLabel_11:
        MOV     A,#0x1e
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock19
        REQUIRE _A_P0
        REQUIRE T1CTL

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
        CFI Block cfiCond20 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_8
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker22 Using cfiCommon1
        CFI (cfiPicker22) NoFunction
        CFI (cfiPicker22) Picker
        MOV     A,R6
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R7
        ADDC    A,#-0x1
        MOV     R7,A
        MOV     A,R6
        ORL     A,R7
        RET
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
        CFI Block cfiCond23 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker25 Using cfiCommon1
        CFI (cfiPicker25) NoFunction
        CFI (cfiPicker25) Picker
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_22:
        RET
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
        CFI Block cfiCond26 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_6
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_7
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_4
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_5
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker30 Using cfiCommon1
        CFI (cfiPicker30) NoFunction
        CFI (cfiPicker30) Picker
        MOV     A,R2
        ADD     A,#0x22
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiPicker30
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
        CFI Block cfiCond31 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_19
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_6
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_7
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_4
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_5
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        MOV     DPL,A
        MOV     A,R3
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
        CFI Block cfiCond38 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond39 Using cfiCommon0
        CFI (cfiCond39) NoFunction
        CFI (cfiCond39) Conditional ??CrossCallReturnLabel_18, ??CrossCallReturnLabel_3
        CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond39) CFA_SP SP+0
        CFI (cfiCond39) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond40 Using cfiCommon0
        CFI (cfiCond40) NoFunction
        CFI (cfiCond40) Conditional ??CrossCallReturnLabel_19
        CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond40) CFA_SP SP+0
        CFI (cfiCond40) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_20
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond42 Using cfiCommon0
        CFI (cfiCond42) NoFunction
        CFI (cfiCond42) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_6
        CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond42) CFA_SP SP+0
        CFI (cfiCond42) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond43 Using cfiCommon0
        CFI (cfiCond43) NoFunction
        CFI (cfiCond43) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_7
        CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond43) CFA_SP SP+0
        CFI (cfiCond43) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_4
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_21, ??CrossCallReturnLabel_5
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker46 Using cfiCommon1
        CFI (cfiPicker46) NoFunction
        CFI (cfiPicker46) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond38
        CFI EndBlock cfiCond39
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiCond42
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiPicker46

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond47 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond48 Using cfiCommon0
        CFI (cfiCond48) NoFunction
        CFI (cfiCond48) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond48) CFA_SP SP+0
        CFI (cfiCond48) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker49 Using cfiCommon1
        CFI (cfiPicker49) NoFunction
        CFI (cfiPicker49) Picker
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        RET
        CFI EndBlock cfiCond47
        CFI EndBlock cfiCond48
        CFI EndBlock cfiPicker49

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond50 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond51 Using cfiCommon0
        CFI (cfiCond51) NoFunction
        CFI (cfiCond51) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond51) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond51) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond51) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond51) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond51) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond51) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond51) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond51) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond51) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond51) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond51) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond51) CFA_SP SP+0
        CFI (cfiCond51) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker52 Using cfiCommon1
        CFI (cfiPicker52) NoFunction
        CFI (cfiPicker52) Picker
        LCALL   ??Subroutine15_0 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     R1,A
        LCALL   ??MotorData?relay
        ; Setup parameters for call to function Delay_MS
        ; Setup parameters for call to function Delay_MS
        MOV     DPTR,#ucSpeed
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??Delay_MS?relay
        INC     ?V0 + 2
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0x4
        RET
        CFI EndBlock cfiCond50
        CFI EndBlock cfiCond51
        CFI EndBlock cfiPicker52
//  539   

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  540 uint8 SendData(uint8 addr, uint8 FC)
SendData:
        CFI Block cfiBlock53 Using cfiCommon0
        CFI Function SendData
        CODE
//  541 {
        FUNCALL SendData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, XorCheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, XorCheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 0
//  542   uint8 ret, i, index=4;
        MOV     ?V0 + 4,#0x4
//  543   
//  544   TxBuffer[0] = 0x3A;
        MOV     DPTR,#TxBuffer
        MOV     A,#0x3a
        MOVX    @DPTR,A
//  545   TxBuffer[1] = 0x00;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  546   TxBuffer[2] = addr;
        MOV     A,R1
        INC     DPTR
        MOVX    @DPTR,A
//  547   TxBuffer[3] = FC;
        MOV     A,R2
        INC     DPTR
        MOVX    @DPTR,A
//  548   
//  549   switch(FC)
        DEC     A
        JZ      ??SendData_0
        DEC     A
        JZ      ??SendData_1
        LJMP    ??SendData_2 & 0xFFFF
//  550   {
//  551   case 0x01: //²éÑ¯ËùÓÐÖÕ¶Ë´«¸ÐÆ÷µÄÊý¾Ý
//  552     for (i=0; i<MAX_NODE; i++)
??SendData_0:
        MOV     R6,#0x0
//  553     {
//  554       osal_memcpy(&TxBuffer[index], NodeData[i], 4);
??SendData_3:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R6
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#NodeData & 0xff
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#(NodeData >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,A
        MOV     ?V0 + 10,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     ?V0 + 0,?V0 + 4
        MOV     A,#TxBuffer & 0xff
        ADD     A,?V0 + 0
        MOV     R2,A
        MOV     A,#(TxBuffer >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  555       index += 4;
        MOV     A,#0x4
        ADD     A,?V0 + 4
        MOV     ?V0 + 4,A
//  556     }
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x4
        JC      ??SendData_3
//  557     TxBuffer[index] = XorCheckSum(TxBuffer, index);
        MOV     DPL,?V0 + 4
        MOV     ?V0 + 0,DPL
        MOV     A,#TxBuffer & 0xff
        ADD     A,?V0 + 0
        MOV     R6,A
        MOV     A,#(TxBuffer >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R7,A
        ; Setup parameters for call to function XorCheckSum
        MOV     R1,?V0 + 4
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        LCALL   ??XorCheckSum?relay
        MOV     A,R1
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
//  558     TxBuffer[index+1] = 0x23; 
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  559     
//  560     HalUARTWrite(UART0, TxBuffer, index+2);
        ; Setup parameters for call to function HalUARTWrite
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     R4,A
        CLR     A
        ADDC    A,#0x0
        MOV     R5,A
??SendData_4:
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  561     ret = 1;
        MOV     R1,#0x1
//  562     break;
        SJMP    ??SendData_5
//  563   case 0x02: //²éÑ¯µ¥¸öÖÕ¶ËÉÏËùÓÐ´«¸ÐÆ÷µÄÊý¾Ý
//  564     osal_memcpy(&TxBuffer[index], NodeData[addr-1], 4);
??SendData_1:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R1
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#(NodeData + 251) & 0xff
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#((NodeData - 5) >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     R2,#(TxBuffer + 4) & 0xff
        MOV     R3,#((TxBuffer + 4) >> 8) & 0xff
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_17:
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 19)
//  565     index += 4;
//  566     TxBuffer[index] = XorCheckSum(TxBuffer, index);
        ; Setup parameters for call to function XorCheckSum
        MOV     R1,#0x8
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        LCALL   ??XorCheckSum?relay
        MOV     A,R1
        MOV     DPTR,#TxBuffer + 8
        MOVX    @DPTR,A
//  567     TxBuffer[index+1] = 0x23; 
        INC     DPTR
        MOV     A,#0x23
        MOVX    @DPTR,A
//  568     
//  569     HalUARTWrite(UART0, TxBuffer, index+2);		
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xa
        MOV     R5,#0x0
        SJMP    ??SendData_4
//  570     ret = 1;
//  571     break;   
//  572   default:
//  573     ret = 0;
??SendData_2:
        MOV     R1,#0x0
//  574     break;
//  575   }
//  576   
//  577   return ret;
??SendData_5:
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock53
//  578 }
//  579 
//  580 /*********************************************************************
//  581 * @fn      SerialApp_Send
//  582 *
//  583 * @brief   Send data OTA.
//  584 *
//  585 * @param   none
//  586 *  3A000507013923    3A 00 01 01 3A 23
//  587 * @return  none
//  588 */
//  589 #pragma optimize=none  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  590 static void SerialApp_Send(void)
SerialApp_Send:
        CFI Block cfiBlock54 Using cfiCommon0
        CFI Function SerialApp_Send
        CODE
//  591 {
        FUNCALL SerialApp_Send, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, GetDataLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, XorCheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  592   uint8 len=0, addr, FC;
        MOV     R7,#0x0
//  593   uint8 checksum=0;
        MOV     ?V0 + 0,#0x0
//  594 
//  595   if (!SerialApp_TxLen && 
//  596       (SerialApp_TxLen = HalUARTRead(UART0, SerialApp_TxBuf, SERIAL_APP_TX_MAX)))
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
        MOV     DPTR,#SerialApp_TxLen
        MOVX    @DPTR,A
        JNZ     $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  597   {
//  598     if (SerialApp_TxLen)
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  599     {
//  600       SerialApp_TxLen = 0;
        MOV     DPTR,#SerialApp_TxLen
        MOV     A,#0x0
        MOVX    @DPTR,A
//  601       if(SerialApp_TxBuf[0] == 0x3A)
        MOV     DPTR,#SerialApp_TxBuf
        MOVX    A,@DPTR
        XRL     A,#0x3a
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  602       {
//  603         addr = SerialApp_TxBuf[2];
        MOV     DPTR,#SerialApp_TxBuf + 2
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
//  604         FC = SerialApp_TxBuf[3];
        MOV     DPTR,#SerialApp_TxBuf + 3
        MOVX    A,@DPTR
        MOV     R6,A
//  605         len = GetDataLen(FC); 
        ; Setup parameters for call to function GetDataLen
        MOV     A,R6
        MOV     R1,A
        LCALL   ??GetDataLen?relay
        MOV     A,R1
        MOV     R7,A
//  606         len += 4;
        MOV     A,#0x4
        ADD     A,R7
        MOV     R7,A
//  607         checksum = XorCheckSum(SerialApp_TxBuf, len);
        ; Setup parameters for call to function XorCheckSum
        MOV     A,R7
        MOV     R1,A
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        LCALL   ??XorCheckSum?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
//  608 
//  609         //½ÓÊÕÊý¾ÝÕýÈ··µ»ØÏàÓ¦Êý¾Ý
//  610         if(checksum == SerialApp_TxBuf[len] && SerialApp_TxBuf[len+1] == 0x23)
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#SerialApp_TxBuf & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#(SerialApp_TxBuf + 1) & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#((SerialApp_TxBuf + 1) >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x23
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  611         {
//  612           if(FC == 7 || FC == 8 || FC == 0x0A || FC == 0x0B || FC == 0x0C) //¿ØÖÆÖÕ¶Ë
        MOV     A,#0x7
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0x8
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0xa
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0xb
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0xc
        XRL     A,R6
        JZ      $+5
        LJMP    ??SerialApp_Send_2 & 0xFFFF
//  613           {                            
//  614             if (afStatus_SUCCESS == AF_DataRequest(&Broadcast_DstAddr,
//  615                                                    (endPointDesc_t *)&SerialApp_epDesc,
//  616                                                    SERIALAPP_CLUSTERID,
//  617                                                    len+2, SerialApp_TxBuf,
//  618                                                    &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
??SerialApp_Send_1:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 2,#0x1e
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 2,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 3,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 2,#SerialApp_TxBuf & 0xff
        MOV     ?V0 + 3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 2,#0x1
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#Broadcast_DstAddr & 0xff
        MOV     R3,#(Broadcast_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R1
        JNZ     ??SerialApp_Send_3
//  619             {
//  620               if(FC == 0x0A) //Èç¹û¿ªÆô×Ô¶¯Ë¢ÐÂÔò²»ÐèÒªÕâ²½²Ù×÷
        MOV     A,#0xa
        XRL     A,R6
        JNZ     ??SerialApp_Send_4
//  621                 NodeData[addr-1][3] = SerialApp_TxBuf[len-1];  //¸üÐÂ»º³åÇøµÆµÄ×´Ì¬
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#(SerialApp_TxBuf + 255) & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#((SerialApp_TxBuf - 1) >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,?V0 + 1
        MOV     R0,?V0 + 1
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x5
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x5
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#(NodeData + 254) & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#((NodeData - 2) >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  622               
//  623               HalUARTWrite(UART0, SerialApp_TxBuf, len+2); //ÎÞÏß·¢ËÍ³É¹¦ºóÔ­Ñù·µ»Ø¸øÉÏÎ»»ú	
??SerialApp_Send_4:
        ; Setup parameters for call to function HalUARTWrite
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??SerialApp_Send_0
//  624               //osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
//  625             }
//  626             else  //ÔÝÊ±Ã»·¢ÏÖ´íÎó£¬¹Ø±ÕÖÕ¶Ë·¢ËÍÒ²Õý³£¡£ÎÞÏß·¢ËÍÊ§°Üºó½«Êý¾ÝÎ»ºÍÐ£ÑéÎ»ÖÃ0·µ¸øÉÏÎ»»ú	
//  627             {
//  628               SerialApp_TxBuf[len-1] = 0x00;
??SerialApp_Send_3:
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#(SerialApp_TxBuf + 255) & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#((SerialApp_TxBuf - 1) >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  629               SerialApp_TxBuf[len] = 0x00;
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,#SerialApp_TxBuf & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#(SerialApp_TxBuf >> 8) & 0xff
        ADDC    A,?V0 + 3
        MOV     DPH,A
        MOV     A,#0x0
        MOVX    @DPTR,A
//  630               HalUARTWrite(UART0, SerialApp_TxBuf, len+2);
        ; Setup parameters for call to function HalUARTWrite
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??SerialApp_Send_0
//  631             }
//  632           }
//  633           else
//  634           {
//  635             SendData(addr, FC);   //²éÑ¯²Ù×÷
??SerialApp_Send_2:
        ; Setup parameters for call to function SendData
        MOV     A,R6
        MOV     R2,A
        MOV     R1,?V0 + 1
        LCALL   ??SendData?relay
        MOV     A,R1
//  636           }
//  637         }
//  638       }
//  639     }
//  640   }
//  641 }
??SerialApp_Send_0:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock54
//  642 
//  643 /*********************************************************************
//  644 * @fn      SerialApp_Resp
//  645 *
//  646 * @brief   Send data OTA.
//  647 *
//  648 * @param   none
//  649 *
//  650 * @return  none
//  651 */
//  652 static void SerialApp_Resp(void)
//  653 {
//  654   if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_RxAddr,
//  655                                          (endPointDesc_t *)&SerialApp_epDesc,
//  656                                          SERIALAPP_CLUSTERID2,
//  657                                          SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
//  658                                          &SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
//  659   {
//  660     osal_set_event(SerialApp_TaskID, SERIALAPP_RESP_EVT);
//  661   }
//  662 }
//  663 
//  664 /*********************************************************************
//  665 * @fn      SerialApp_CallBack
//  666 *
//  667 * @brief   Send data OTA.
//  668 *
//  669 * @param   port - UART port.
//  670 * @param   event - the UART port event flag.
//  671 *
//  672 * @return  none
//  673 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  674 static void SerialApp_CallBack(uint8 port, uint8 event)
SerialApp_CallBack:
        CFI Block cfiBlock55 Using cfiCommon0
        CFI Function SerialApp_CallBack
        CODE
//  675 {
        FUNCALL SerialApp_CallBack, SerialApp_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  676   (void)port;
//  677   
//  678   if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
//  679 #if SERIAL_APP_LOOPBACK
//  680       (SerialApp_TxLen < SERIAL_APP_TX_MAX))
//  681 #else
//  682     !SerialApp_TxLen)
        MOV     A,#0x7
        ANL     A,R6
        JZ      ??SerialApp_CallBack_0
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JNZ     ??SerialApp_CallBack_0
//  683 #endif
//  684   {
//  685     SerialApp_Send();
        ; Setup parameters for call to function SerialApp_Send
        LCALL   ??SerialApp_Send?relay
        CFI EndBlock cfiBlock55
//  686   }
//  687 }
??SerialApp_CallBack_0:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock56 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock56
//  688 
//  689 
//  690 //--------------------------------------------------------------------------------------
//  691 //²éÑ¯µ¥¸öÖÕ¶ËÉÏËùÓÐ´«¸ÐÆ÷µÄÊý¾Ý 3A 00 01 02 XX 23  ÏìÓ¦£º3A 00 01 02 00 00 00 00 xor 23

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  692 void SerialApp_SendPeriodicMessage( void )
SerialApp_SendPeriodicMessage:
        CFI Block cfiBlock57 Using cfiCommon0
        CFI Function SerialApp_SendPeriodicMessage
        CODE
//  693 {
        FUNCALL SerialApp_SendPeriodicMessage, DHT11
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, XorCheckSum
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  694   uint8 SendBuf[11]={0};
        MOV     DPTR,#`?<Constant {0}>_1`
        PUSH    DPL
        CFI CFA_SP SP+-1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  695 
//  696 #ifdef WSN_SENSOR  
//  697   SendBuf[0] = 0x3A;                          
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x3a
        MOVX    @DPTR,A
//  698   SendBuf[1] = HI_UINT16( EndDeviceID );
        MOV     DPTR,#EndDeviceID + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  699   SendBuf[2] = LO_UINT16( EndDeviceID );
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  700   SendBuf[3] = 0x02;                       //FC
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  701   
//  702   DHT11();                //»ñÈ¡ÎÂÊª¶È
        ; Setup parameters for call to function DHT11
        LCALL   ??DHT11?relay
//  703   SendBuf[4] = wendu;  
        MOV     DPTR,#wendu
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  704   SendBuf[5] = shidu;  
        MOV     DPTR,#shidu
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  705   SendBuf[6] = GetGas();  //»ñÈ¡ÆøÌå´«¸ÐÆ÷µÄ×´Ì¬  
        MOV     C,0x80.6
        CLR     A
        RLC     A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  706   SendBuf[7] = GetLamp(); //»ñµÃµÆµÄ×´Ì¬
        MOV     C,0x80.5
        CLR     A
        RLC     A
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  707   SendBuf[8] = XorCheckSum(SendBuf, 9);
        ; Setup parameters for call to function XorCheckSum
        MOV     R1,#0x9
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??XorCheckSum?relay
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
//  708   SendBuf[9] = 0x23;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x23
        MOVX    @DPTR,A
//  709   
//  710   SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
        LCALL   ?Subroutine4 & 0xFFFF
//  711   SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
//  712   SerialApp_TxAddr.addr.shortAddr = 0x00;  
//  713   if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
//  714                       SERIALAPP_CLUSTERID,
//  715                       10,
//  716                       SendBuf,
//  717                       &SerialApp_MsgID, 
//  718                       0, 
//  719                       AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0xa
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_TxAddr & 0xff
        MOV     R3,#(SerialApp_TxAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  720   {
//  721     // Successfully requested to be sent.
//  722   }
//  723   else
//  724   {
//  725     // Error occurred in request to send.
//  726   }
//  727 #endif
//  728   
//  729 #ifdef WSN_BEEP
//  730   SendBuf[0] = GetGas();  //»ñÈ¡ÆøÌå´«¸ÐÆ÷µÄ×´Ì¬ 0ÎªÓÐº¦ÆøÌå   1ÎªÕý³£
//  731   
//  732   //ÖÕ¶Ë5Ö´ÐÐ·äÃùÆ÷²Ù×÷   ·äÃùÆ÷¶¯×÷µçÆ½ 1: Ïì £¬0: ²»Ïì
//  733   if(SendBuf[0] == 0 && EndDeviceID == 5)
//  734   {
//  735     TIMER1_RUN();      //¼ì²âµ½Òì³£ÆøÌåÊ±·äÃùÆ÷Ïì
//  736   }
//  737   else
//  738   {
//  739     TIMER1_STOP();    //ÆøÌåÕý³£²»Ïì
//  740   }    
//  741 #endif
//  742 }
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock57
        REQUIRE ?Subroutine2
        REQUIRE _A_P0
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock58 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock58

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond59 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 26)
        CFI Block cfiCond60 Using cfiCommon0
        CFI (cfiCond60) NoFunction
        CFI (cfiCond60) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond60) CFA_SP SP+0
        CFI (cfiCond60) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiPicker61 Using cfiCommon1
        CFI (cfiPicker61) NoFunction
        CFI (cfiPicker61) Picker
        MOV     DPTR,#SerialApp_TxAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
        MOV     DPTR,#SerialApp_TxAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond59
        CFI EndBlock cfiCond60
        CFI EndBlock cfiPicker61
//  743 
//  744 
//  745 #if UART_DEBUG   
//  746 //Í¨¹ý´®¿ÚÊä³ö¶ÌµØÖ· IEEE
//  747 void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr)
//  748 {
//  749   uint8 strIeeeAddr[17] = {0};
//  750   char  buff[30] = {0};    
//  751   
//  752   //»ñµÃ¶ÌµØÖ·   
//  753   sprintf(buff, "shortAddr:%04X   IEEE:", shortAddr);  
//  754   
//  755   //»ñµÃIEEEµØÖ·
//  756   GetIeeeAddr(pIeeeAddr, strIeeeAddr);
//  757   
//  758   HalUARTWrite (UART0, (uint8 *)buff, strlen(buff));
//  759   Delay_ms(10);
//  760   HalUARTWrite (UART0, strIeeeAddr, 16); 
//  761   HalUARTWrite (UART0, "\n", 1);
//  762 }
//  763 
//  764 void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr)
//  765 {
//  766   uint8 i;
//  767   uint8 *xad = pIeeeAddr;
//  768   
//  769   for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
//  770   {
//  771     uint8 ch;
//  772     ch = (*xad >> 4) & 0x0F;
//  773     *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
//  774     i++;
//  775     ch = *xad & 0x0F;
//  776     *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
//  777     i++;
//  778   }
//  779 }
//  780 #endif  
//  781 
//  782 void AfSendAddrInfo(void)
//  783 {
//  784   uint16 shortAddr;
//  785   uint8 strBuf[11]={0};  
//  786   
//  787   SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  788   SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
//  789   SerialApp_TxAddr.addr.shortAddr = 0x00;   
//  790   
//  791   shortAddr=NLME_GetShortAddr();
//  792   
//  793   strBuf[0] = 0x3B;                          //·¢ËÍµØÖ·¸øÐ­µ÷Æ÷ ¿ÉÓÃÓÚµã²¥
//  794   strBuf[1] = HI_UINT16( shortAddr );        //´æ·Å¶ÌµØÖ·¸ß8Î»
//  795   strBuf[2] = LO_UINT16( shortAddr );        //´æ·Å¶ÌµØÖ·µÍ8Î»
//  796   
//  797   osal_memcpy(&strBuf[3], NLME_GetExtAddr(), 8);
//  798   
//  799   if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
//  800                       SERIALAPP_CLUSTERID,
//  801                       11,
//  802                       strBuf,
//  803                       &SerialApp_MsgID, 
//  804                       0, 
//  805                       AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  806   {
//  807   }
//  808   else
//  809   {
//  810     // Error occurred in request to send.
//  811   }   
//  812 }
//  813 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  814 uint8 XorCheckSum(uint8 * pBuf, uint8 len)
XorCheckSum:
        CFI Block cfiBlock62 Using cfiCommon0
        CFI Function XorCheckSum
        CODE
//  815 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R4,A
//  816   uint8 i;
//  817   uint8 byRet=0;
//  818   
//  819   if(len == 0)
        JNZ     ??XorCheckSum_0
//  820     return byRet;
        MOV     R1,#0x0
        SJMP    ??XorCheckSum_1
//  821   else
//  822     byRet = pBuf[0];
??XorCheckSum_0:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R1,A
//  823   
//  824   for(i = 1; i < len; i ++)
        MOV     R0,#0x1
        SJMP    ??XorCheckSum_2
//  825     byRet = byRet ^ pBuf[i];
??XorCheckSum_3:
        MOV     ?V0 + 0,R0
        MOV     A,R2
        ADD     A,?V0 + 0
        LCALL   ??Subroutine14_0 & 0xFFFF
??CrossCallReturnLabel_20:
        XCH     A,R1
        XRL     A,R1
        MOV     R1,A
        INC     R0
??XorCheckSum_2:
        MOV     A,R0
        CLR     C
        SUBB    A,R4
        JC      ??XorCheckSum_3
//  826   
//  827   return byRet;
??XorCheckSum_1:
        SJMP    ?Subroutine2
        CFI EndBlock cfiBlock62
//  828 }
//  829 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  830 uint8 GetDataLen(uint8 fc)
GetDataLen:
        CFI Block cfiBlock63 Using cfiCommon0
        CFI Function GetDataLen
        CODE
//  831 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
//  832   uint8 len=0;
        MOV     R1,#0x0
//  833   switch(fc)
        ADD     A,#-0x7
        JZ      ??GetDataLen_0
        DEC     A
        JZ      ??GetDataLen_0
        ADD     A,#-0x2
        JZ      ??GetDataLen_0
        DEC     A
        JZ      ??GetDataLen_0
        DEC     A
        JZ      ??GetDataLen_0
        DEC     A
        JNZ     ??GetDataLen_1
//  834   {
//  835   case 0x07:
//  836   case 0x08:
//  837   case 0x0A:
//  838   case 0x0B:
//  839   case 0x0C:
//  840   case 0x0D:
//  841     len = 1;
??GetDataLen_0:
        INC     R1
//  842     break;
//  843   }
//  844   
//  845   return len;
??GetDataLen_1:
        LJMP    ?BRET
        CFI EndBlock cfiBlock63
//  846 }
//  847 
//  848 //»ñµÃP0_5 ¼ÌµçÆ÷Òý½ÅµÄµçÆ½
//  849 uint8 GetLamp( void )
//  850 {
//  851   uint8 ret;
//  852   
//  853   if(LAMP_PIN == 0)
//  854     ret = 0;
//  855   else
//  856     ret = 1;
//  857   
//  858   return ret;
//  859 }
//  860 
//  861 //»ñµÃP0_6 MQ-2ÆøÌå´«¸ÐÆ÷µÄÊý¾Ý 0ÎªÓÐº¦ÆøÌå   1ÎªÕý³£
//  862 uint8 GetGas( void )
//  863 {
//  864   uint8 ret;
//  865   
//  866   if(GAS_PIN == 0)
//  867   {
//  868     ret = 0;
//  869   }
//  870   else
//  871   {
//  872     ret = 1;
//  873   }
//  874   
//  875   return ret;
//  876 }
//  877 //-------------------------------------------------------------------
//  878 
//  879 
//  880 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  881 //#ifdef WSN_BEEP
//  882 //²½½øµç»úÇý¶¯²¿·Ö

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  883 static void MotorData(uchar data)
MotorData:
        CFI Block cfiBlock64 Using cfiCommon0
        CFI Function MotorData
        CODE
//  884 {
        ; Saved register size: 0
        ; Auto size: 0
//  885   A1 = 1&(data>>4);
        MOV     A,R1
        MOV     C,0xE0 /* A   */.4
        MOV     0x80.4,C
//  886   B1 = 1&(data>>5);
        MOV     C,0xE0 /* A   */.5
        MOV     0x80.5,C
//  887   C1 = 1&(data>>6);
        MOV     C,0xE0 /* A   */.6
        MOV     0x80.6,C
//  888   D1 = 1&(data>>7);
        MOV     C,0xE0 /* A   */.7
        MOV     0x80.7,C
//  889 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock64
        REQUIRE _A_P0
//  890 
//  891 //Ë³Ê±Õë×ª¶¯
//  892 static void MotorCW(void)
//  893 {
//  894   uchar i;
//  895   for(i=0;i<4;i++)
//  896   {
//  897     MotorData(phasecw[i]);
//  898     Delay_MS(ucSpeed);//×ªËÙµ÷½Ú
//  899   }
//  900 }
//  901 //ÄæÊ±Õë×ª¶¯
//  902 static void MotorCCW(void)
//  903 {
//  904   uchar i;
//  905   for(i=0;i<4;i++)
//  906   {
//  907     MotorData(phaseccw[i]);
//  908     Delay_MS(ucSpeed);//×ªËÙµ÷½Ú
//  909   }
//  910 }
//  911 
//  912 //Í£Ö¹×ª¶¯
//  913 static void MotorStop(void)
//  914 {
//  915   MotorData(0x00);
//  916 }
//  917 
//  918 #ifdef WSN_STEP
//  919 //³õÊ¼»¯IO¿Ú³ÌÐò
//  920 static void InitStepMotor(void)
//  921 {
//  922   P0SEL &= 0x0F;  //P04 05 06 07¶¨ÒåÎªÆÕÍ¨IO
//  923   P0DIR |= 0xF0;  //P04 05 06 07¶¨ÒåÎªÊä³ö
//  924   
//  925   MotorData(0x00);//Í£Ö¹×ª¶¯
//  926 }
//  927 #endif
//  928 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  929 static void Delay_MS(unsigned int Time)// 1msÑÓÊ±
Delay_MS:
        CFI Block cfiBlock65 Using cfiCommon0
        CFI Function Delay_MS
        CODE
//  930 {
        FUNCALL Delay_MS, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  931   char i;
//  932   
//  933   while(Time--)
??Delay_MS_0:
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
        MOV     A,R0
        ADD     A,#-0x1
        DEC     R6
        MOV     A,R1
        ADDC    A,#-0x1
        MOV     R7,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??Delay_MS_1
//  934   {
//  935     for(i=0;i<100;i++)
        MOV     ?V0 + 0,#0x64
//  936       MicroWait(10);
??Delay_MS_2:
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
        DEC     ?V0 + 0
        MOV     A,?V0 + 0
        JZ      ??Delay_MS_0
        SJMP    ??Delay_MS_2
//  937   }
//  938 }
??Delay_MS_1:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock65
//  939 //#endif
//  940 //~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//  941 
//  942 
//  943 //-------------------------------------------------------------------
//  944 //Ð­ÒéÕ»ÀïÊ¹ÓÃtimer 1Êä³öPWM£¬Ê¹ÓÃµÄÊÇÕý¼ÆÊý/µ¹¼ÆÊýÄ£Ê½£¬Õ¼¿Õ±È¿Éµ÷Õû

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  945 void init_port(void)
init_port:
        CFI Block cfiBlock66 Using cfiCommon0
        CFI Function init_port
        CODE
//  946 {
        ; Saved register size: 0
        ; Auto size: 0
//  947   P0SEL |= 0x80;         //ÉèÖÃP0.7¿ÚÎªÍâÉè
        ORL     0xf3,#0x80
//  948   P0DIR |= 0x80;         //ÉèÖÃP0.7ÎªÊä³ö
        ORL     0xfd,#0x80
//  949   PERCFG |= 0x40;        //ÉèÖÃ¶¨Ê±Æ÷1 µÄI / O Î»ÖÃ   1£º ±¸ÓÃÎ»ÖÃ2
        ORL     0xf1,#0x40
//  950   
//  951   return ;
        LJMP    ?BRET
        CFI EndBlock cfiBlock66
        REQUIRE P0SEL
        REQUIRE P0DIR
        REQUIRE PERCFG
//  952 }
//  953 
//  954 // ½«»ù×¼Öµ·ÅÈëT1CC0 ¼Ä´æÆ÷, ½«±»±È½ÏÖµ·ÅÈëT1CC3¼Ä´æÆ÷
//  955 // µ±T1CC3ÖÐµÄÖµÓëT1CC0ÖÐµÄÖµÏàµÈÊ±£¬ÔòT1CC3 ÉèÖÃorÇå³ý

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  956 void init_timer(void)
init_timer:
        CFI Block cfiBlock67 Using cfiCommon0
        CFI Function init_timer
        CODE
//  957 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  958   T1CC0L = 0xff;         //PWM duty cycle  ÖÜÆÚ
        MOV     0xda,#-0x1
//  959   T1CC0H = 0x0;
        MOV     0xdb,#0x0
//  960   
//  961   T1CC3L = 0x00;        //PWM signal period Õ¼¿Õ±È
        MOV     DPTR,#0x62ac
        CLR     A
        MOVX    @DPTR,A
//  962   T1CC3H = 0x00;
        INC     DPTR
        MOVX    @DPTR,A
//  963   
//  964   //µÈÓÚT1CC0ÖÐµÄÊýÖµÊ±ºò£¬Êä³ö¸ßµçÆ½ 1£» µÈÓÚT1CC3ÖÐµÄÊýÖµÊ±ºò£¬Êä³öµÍµçÆ½ 0 
//  965   //ÆäÊµÕû¸öÕ¼¿Õ±È¾ÍÎª50%  ÎªÁË·äÃùÆ÷Êä³öÁ¬ÐøµÄÏìÉùÐÞ¸ÄÁËÕ¼¿Õ±È
//  966   T1CCTL3 = 0x34;       
        MOV     DPTR,#0x62a3
        MOV     A,#0x34
        MOVX    @DPTR,A
//  967   T1CTL |= 0x0f;         // divide with 128 and to do i up-down mode
        ORL     0xe4,#0xf
        CFI EndBlock cfiBlock67
//  968   return ;
        REQUIRE ?Subroutine3
        REQUIRE T1CC0L
        REQUIRE T1CC0H
        REQUIRE T1CTL
        ; // Fall through to label ?Subroutine3
//  969 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiBlock68 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+-5
        CFI DPL0 Frame(CFA_SP, 4)
        CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
        CFI CFA_SP SP+-4
        CFI DPH0 SameValue
        POP     DPL
        CFI CFA_SP SP+-3
        CFI DPL0 SameValue
        LJMP    ?BRET
        CFI EndBlock cfiBlock68
//  970 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  971 void start_pwm(void) 
start_pwm:
        CFI Block cfiBlock69 Using cfiCommon0
        CFI Function start_pwm
        CODE
//  972 {
        FUNCALL start_pwm, init_port
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL start_pwm, init_timer
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  973   init_port();
        ; Setup parameters for call to function init_port
        LCALL   ??init_port?relay
//  974   init_timer();
        ; Setup parameters for call to function init_timer
        LCALL   ??init_timer?relay
//  975   // IEN1 |=0x02;     //Timer 1 ÖÐ¶ÏÊ¹ÄÜ
//  976   // EA = 1;          //È«¾ÖÖÐ¶ÏÊ¹ÄÜ
//  977   // while(1) {;}
//  978   return ;
        SJMP    ?Subroutine3
        CFI EndBlock cfiBlock69
//  979 }
//  980 
//  981 //volatile unsigned char count = 0;
//  982 
//  983 #pragma vector=T1_VECTOR

        RSEG NEAR_CODE:CODE:NOROOT(0)
//  984 __interrupt void _IRQ_timer1(void)
_IRQ_timer1:
        CFI Block cfiBlock70 Using cfiCommon1
        CFI Function _IRQ_timer1
        CODE
//  985 {
        ; Saved register size: 1
        ; Auto size: 0
//  986   //TODO....
//  987 }
        RETI
        CFI EndBlock cfiBlock70

        COMMON INTVEC:CODE:ROOT(0)
        ORG 75
`??_IRQ_timer1??INTVEC 75`:
        LJMP       (_IRQ_timer1)

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for EndDeviceID>`:
        DATA16
        DW 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for AppTitle>`:
        DB "ALD WSN-system"
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ucEdDir>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ucDirection>`:
        DATA8
        DB 1

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for ucSpeed>`:
        DATA8
        DB 2

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for phasecw>`:
        DATA8
        DB 128
        DB 64
        DB 32
        DB 16

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for phaseccw>`:
        DATA8
        DB 16
        DB 32
        DB 64
        DB 128

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessMSGCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessMSGCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??XorCheckSum?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    XorCheckSum

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetDataLen?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetDataLen

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MotorData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    MotorData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_MS?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_MS

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??init_port?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    init_port

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??init_timer?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    init_timer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??start_pwm?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    start_pwm

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-Node01">`:
        DB "ALD WSN-Node01"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-Node02">`:
        DB "ALD WSN-Node02"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-Node03">`:
        DB "ALD WSN-Node03"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-Node04">`:
        DB "ALD WSN-Node04"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-BEEP05">`:
        DB "ALD WSN-BEEP05"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "stepping motor">`:
        DB "stepping motor"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ALD WSN-system">`:
        DB "ALD WSN-system"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_2`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0

        END
//  988 //-------------------------------------------------------------------
//  989 
//  990 
//  991 /*********************************************************************
//  992 *********************************************************************/
//  993   
// 
// 2 670 bytes in segment BANKED_CODE
//    84 bytes in segment BANK_RELAYS
//     3 bytes in segment INTVEC
//     1 byte  in segment NEAR_CODE
//     7 bytes in segment SFR_AN
//    33 bytes in segment XDATA_I
//    33 bytes in segment XDATA_ID
//   179 bytes in segment XDATA_ROM_C
//   219 bytes in segment XDATA_Z
// 
// 2 788 bytes of CODE  memory (+ 3 bytes shared)
//   179 bytes of CONST memory
//     0 bytes of DATA  memory (+ 7 bytes shared)
//   252 bytes of XDATA memory
//
//Errors: none
//Warnings: 2
